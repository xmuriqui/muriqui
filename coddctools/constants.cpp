
#include <string>


#include "DCT_dctools.hpp"
#include "DCT_tools.hpp"



using namespace dctools;





int dctools::DCT_enumToStr(const DCT_OPTIMIZATION_RETURN_CODE code, std::string &str)
{
	static const DCT_Dict<int, const char*> dict = {
		{DCT_ATTSTR(DCT_ORC_OPTIMAL_SOLUTION) },
		{DCT_ATTSTR(DCT_ORC_INFEASIBLE_PROBLEM) },
		{DCT_ATTSTR(DCT_ORC_UNBOUNDED_PROBLEM) },
		{DCT_ATTSTR(DCT_ORC_CLIENT_ERROR) },
		{DCT_ATTSTR(DCT_ORC_EVALUATION_ERROR) },
		{DCT_ATTSTR(DCT_ORC_LIBRARY_NOT_AVAILABLE) },
		{DCT_ATTSTR(DCT_ORC_MAX_ITERATIONS) },
		{DCT_ATTSTR(DCT_ORC_MAX_TIME) },
		{DCT_ATTSTR(DCT_ORC_MILP_SOLVER_ERROR) },
		{DCT_ATTSTR(DCT_ORC_NLP_SOLVER_ERROR) },
		{DCT_ATTSTR(DCT_ORC_MEMORY_ERROR) },
		{DCT_ATTSTR(DCT_ORC_SERVER_CONNECTION_ERROR) },
		{DCT_ATTSTR(DCT_ORC_SUBROUTINE_ERROR) },
		{DCT_ATTSTR(DCT_ORC_SUBSOLVER_ERROR) },
		{DCT_ATTSTR(DCT_ORC_UNDEFINED_ERROR) }
	};
	
	if(dict.count(code) == 0)
	{
		DCT_PRINTERRORMSGP("No listed enumeration value: ", code);
		return DCT_RC_VALUE_ERROR;
	}
	
	str = dict.at(code);
	
	return 0;
}


int dctools::DCT_enumToStr(const DCT_CONECTION_CODE code, std::string &str)
{
	static const DCT_Dict<int, const char*> dict = {
		{DCT_ATTSTR(DCT_CC_SERVICE_REQUEST) },
		{DCT_ATTSTR(DCT_CC_SERVICE_ACCEPTED) },
		{DCT_ATTSTR(DCT_CC_SERVICE_REFUSED) },
		
		{DCT_ATTSTR(DCT_CC_VERSION_REQUEST) },
		{DCT_ATTSTR(DCT_CC_VERSION_RESPONSE) },
		
		{DCT_ATTSTR(DCT_CC_START_SERVICE) },
		{DCT_ATTSTR(DCT_CC_STOP_SERVICE) },
		
		{DCT_ATTSTR(DCT_CC_SERVICE_STATUS_REQUEST) },
		{DCT_ATTSTR(DCT_CC_SERVICE_STATUS_RESPONSE) },
		
		{DCT_ATTSTR(DCT_CC_BASIC_INPUT_PARAMETERS) },
		{DCT_ATTSTR(DCT_CC_INPUT_PROBLEM_FILE) },
		{DCT_ATTSTR(DCT_CC_OUTPUT_PARAMETERS) },
		
		{DCT_ATTSTR(DCT_CC_SOLVER_PARAMETERS) },
		
		{DCT_ATTSTR(DCT_CC_LOWER_BOUND_REQUEST) },
		{DCT_ATTSTR(DCT_CC_LOWER_BOUND_RESPONSE) },
		
		{DCT_ATTSTR(DCT_CC_UPPER_BOUND_RESPONSE) },
		
		{DCT_ATTSTR(DCT_CC_OPEN_NODE_REQUEST) },
		{DCT_ATTSTR(DCT_CC_OPEN_NODE_RESPONSE) },
		{DCT_ATTSTR(DCT_CC_NO_OPEN_NODE_AVAILABLE) },
		{DCT_ATTSTR(DCT_CC_NO_OPEN_NODE_SERVICE_NOT_STARTED) },
		
		{DCT_ATTSTR(DCT_CC_CLEAR_VAR_BOUNDS) },
		
		{DCT_ATTSTR(DCT_CC_BEST_SOLUTION_REQUEST) },
		{DCT_ATTSTR(DCT_CC_NEW_SOLUTION_FOUND) },
		{DCT_ATTSTR(DCT_CC_NO_SOLUTION_AVAILABLE) },
		
		{DCT_ATTSTR(DCT_CC_FINAL_RESULTS) },
		
		{DCT_ATTSTR(DCT_CC_SERVER_CLOSING_CONNECTION) },
		
		{DCT_ATTSTR(DCT_CC_NUMBER_OF_INITIAL_OPEN_NODES_REQUEST)},
		{DCT_ATTSTR(DCT_CC_INITIAL_OPEN_NODE_RESPONSE) }
	};
	
	
	if(dict.count(code) == 0)
	{
		DCT_PRINTERRORMSGP("No listed enumeration value: ", code);
		return DCT_RC_VALUE_ERROR;
	}
	
	str = dict.at(code);
	
	return 0;
}
